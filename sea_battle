from random import randint
from time import sleep


class Pip:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, arg):
        return self.x == arg.x and self.y == arg.y

    def __repr__(self):
        return f"[{self.x},{self.y}]"


class Ships:
    
    def __init__(self):
        self.coordinates = []
        self.busy_pips = []
        self.ship_coordinates = []
        self.count_ships = 0

    def coordinates_setter(self, set_value):
        self.coordinates = set_value
        self.check_ship()
        return self.coordinates

    def ship_coordinates_getter(self):
        return self.ship_coordinates

    @staticmethod
    def square_around(ship_coordinates):
        if ship_coordinates:
            square_around_point = []
            for i in ship_coordinates:
                x, y = i[0], i[1]
                square_range_y = range(y - 1, y + 2)
                square_range_x = range(x - 1, x + 2)
                for yi in square_range_y:
                    for xj in square_range_x:
                        if any((yi == 7, xj == 7, yi == 0, xj == 0)):  # отсекаем овер значения
                            pass
                        elif [xj, yi] not in square_around_point:
                            square_around_point.append([xj, yi])
                        else:
                            pass
            return square_around_point

    def check_ship(self):
        if self.coordinates in self.ship_coordinates and self.coordinates not in self.busy_pips:
            return False  # отсекаем занятые клетки
        x, y = map(int, self.coordinates)
        self.ship_coordinates.append(self.coordinates)
        count_shoots_list = [i for sublist in self.ship_coordinates for i in sublist]
        pos = [[*range(1, 4)], [*range(2, 5)], [*range(3, 6)], [*range(4, 7)]]
        pos_x = count_shoots_list[::2]  # X
        pos_y = count_shoots_list[1::2]  # Y
        while True:
            if len(self.ship_coordinates) < 4 and self.coordinates not in self.busy_pips:
                if all((x in pos_x, y in range(y - 1, y + 2))) or any((y in pos_y, x in range(x - 1, x + 2))):
                    if len(self.ship_coordinates) < 2:
                        break
                    elif len(self.ship_coordinates) == 2 and (
                            [pos_x[0]] * len(pos_x) == pos_x and y in range(pos_y[0] - 1, pos_y[0] + 2)) or [
                        pos_y[0]] * len(pos_y) == pos_y and x in range(pos_x[0] - 1, pos_x[0] + 2):
                        break
                    elif len(self.ship_coordinates) == 2:
                        self.ship_coordinates.pop()
                        break
                    elif len(self.ship_coordinates) == 3 and any(
                            ((pos_y.sort() in pos or pos_y in pos[::-1]) and ([pos_x[0]] * len(pos_x) == pos_x),
                             (pos_x.sort() in pos or pos_x in pos[::-1]) and ([pos_y[0]] * len(pos_y) == pos_y))):
                        self.busy_pips = self.square_around(self.ship_coordinates)
                        self.count_ships += 1
                        return self.ship_coordinates  # Проверка на трёхпалубник пройдена
                    elif len(self.ship_coordinates) == 3:
                        print("Введите 3 пары кординат подряд по горизонтали или вертикали")
                        self.ship_coordinates.pop()
                        break
                else:
                    print("Введите 3 пары кординат подряд по горизонтали или вертикали")
                    break
            if len(self.ship_coordinates) < 8 and self.coordinates not in self.busy_pips:
                if len(self.ship_coordinates) == 4:
                    break
                if all((len(self.ship_coordinates) == 5, (pos_x[3] == pos_x[4] and y in range(pos_y[3] - 1, pos_y[3]
                    + 2)) or pos_y[3] == pos_y[4] and x in range(pos_x[3] - 1, pos_x[3] + 2))):
                    self.busy_pips = self.square_around(self.ship_coordinates)
                    self.count_ships += 1
                    return self.ship_coordinates
                elif len(self.ship_coordinates) == 5:
                    print("Введите 2 пары кординат подряд по горизонтали или вертикали", self.ship_coordinates)
                    self.ship_coordinates.pop()
                    break
                if len(self.ship_coordinates) == 6:
                    break
                if all((len(self.ship_coordinates) == 7, (pos_x[5] == pos_x[6] and y in range(pos_y[5] - 1,
                    pos_y[5] + 2)) or pos_y[5] == pos_y[6] and x in range(pos_x[5] - 1, pos_x[5] + 2))):
                    self.busy_pips = self.square_around(self.ship_coordinates)
                    self.count_ships += 1
                    return self.ship_coordinates
                elif len(self.ship_coordinates) == 7:
                    print("Введите 2 пары кординат подряд по горизонтали или вертикали", self.ship_coordinates)
                    self.ship_coordinates.pop()
                    break
                else:
                    self.ship_coordinates.pop(len(self.ship_coordinates) - 1)
                    return False
            if len(self.ship_coordinates) < 11 and self.coordinates not in self.busy_pips:
                self.busy_pips = self.square_around(self.ship_coordinates)
                self.count_ships += 1
                return self.ship_coordinates
            if len(self.ship_coordinates) == 11 and self.coordinates not in self.busy_pips:
                print("Корабли успешно расположены!")
                self.busy_pips = self.square_around(self.ship_coordinates)
                return self.ship_coordinates
            elif any((len(self.ship_coordinates) == 10, len(self.ship_coordinates) == 11)) and len(
                    self.busy_pips) == 36:
                self.ship_coordinates = []
                self.busy_pips = []
            elif len(self.ship_coordinates) > 11:
                self.ship_coordinates.pop()
                self.count_ships -= 1
                break
            else:
                self.ship_coordinates.pop()
                break


class Board:
    H, V, COUNT, icons = 7, 8, 0, ["| .", "| ■", "| X"]  # параметры

    def __init__(self, displayed_ships=False):
        self.displayed_ships = displayed_ships  # отображать/спрятать поле бота
        self.field = [[f"| 0"] * 7 for _ in range(1, 8)]  # генератор фиелд
        self.count_shoots = 0  # счётчик попадания
        self.placement_ships = []  # список координат
        self.busy_pips_around = Ships.square_around(self.placement_ships)  # точки = метод расставляющий точки вокруг

    def set_coordinates(self, ships_tuple):  # передача кординаты на печать
        self.placement_ships = ships_tuple
        for i in ships_tuple:
            self.battleship_printing(i)
        return self.placement_ships

    def battleship_printing(self, coord):  # Назначениекординат
        x, y = map(int, coord)
        self.field[x][y] = f"| ■"

    def __str__(self):  # знаю вывод можно было сделать лучше и предназначение return str знаю:D
        print("_" * 27)
        print("    1   2   3   4   5   6")
        for i in range(1, 7):
            self.field[i][0] = i
            tas = str(self.field[i])
            if self.displayed_ships:
                tas = str(tas).replace("| ■", "| O")
            print(str(str(tas)).replace("'", '').replace(',', '').replace('[', '').replace(']', ' |'))
            if tas[i][0] != "| 0 ":
                continue
        return '_' * 27

    @staticmethod
    def input_error(coordinates):  # проверка координта
        while True:
            if len(coordinates) != 2:
                print("Введите кординаты в формате (1 1) через пробел!")
                return False
            if not (coordinates[0].isdigit() and coordinates[1].isdigit()):
                print("Подсказка: При вводе кординат,используются только цифры")
                return False
            xp, yp = map(int, coordinates)
            if (xp not in range(1, 7)) or (yp not in range(1, 7)):
                print("Подсказка: Введите кординаты цифрами от 1 до 6")
                return False
            else:
                return [xp, yp]

    def square_printing(self, coordinates):
        for i in coordinates:
            square = Ships.square_around(i)
            for j in square:
                if self.field[j[0]][j[1]] == self.icons[2]:
                    pass
                else:
                    self.field[j[0]][j[1]] = self.icons[0]
        for k in self.busy_pips_around:
            if self.field[k[0]][k[1]] == self.icons[0]:
                pass
            else:
                self.field[k[0]][k[1]] = self.icons[2]

    def shot(self, coordinates):
        self.COUNT += 1
        x, y = int(coordinates[0]), int(coordinates[1])
        if coordinates in self.busy_pips_around:
            raise ValueError
        else:
            self.busy_pips_around.append([x, y])
        if [x, y] in self.placement_ships:
            self.count_shoots += 1
            print("Корабль ранен! количество потопленных отсеков: ", self.count_shoots)
            if all((self.placement_ships[0] in self.busy_pips_around, self.placement_ships[1] in self.busy_pips_around,
                    self.placement_ships[2] in self.busy_pips_around)):
                self.square_printing(
                    [[self.placement_ships[0], self.placement_ships[1], self.placement_ships[2]]])
            if all((
                    self.placement_ships[3] in self.busy_pips_around,
                    self.placement_ships[4] in self.busy_pips_around)):
                self.square_printing([[self.placement_ships[3], self.placement_ships[4]]])
            if all((
                    self.placement_ships[5] in self.busy_pips_around,
                    self.placement_ships[6] in self.busy_pips_around)):
                self.square_printing([[self.placement_ships[5], self.placement_ships[6]]])
            if self.placement_ships[7] in self.busy_pips_around:
                self.square_printing([[self.placement_ships[7]]])
            if self.placement_ships[8] in self.busy_pips_around:
                self.square_printing([[self.placement_ships[8]]])
            if self.placement_ships[9] in self.busy_pips_around:
                self.square_printing([[self.placement_ships[9]]])
            if self.placement_ships[10] in self.busy_pips_around:
                self.square_printing([[self.placement_ships[10]]])
            self.field[int(x)][int(y)] = self.icons[2]
            return self.placement_ships
        else:
            self.field[int(x)][int(y)] = self.icons[0]
            print("Мимо 😉*")
            return False

    def begin(self):
        self.busy_pips_around = []


class PlayerMoves:
    def __init__(self, player1, player2):
        self.player1 = player1
        self.player2 = player2

    def ask(self):
        print(self)
        raise NotImplementedError()

    def coordinates(self):
        raise Exception

    def move(self):
        while True:
            try:
                actually_mov = self.player2.shot(self.coordinates())
            except ValueError:
                print('Сюда уже стреляли')
                actually_mov = self.move()
            return actually_mov


class Bot(PlayerMoves):
    def coordinates(self):
        sleep(1)
        print("Waiting: AI thinking...")
        sleep(1)
        coordinates = [randint(1, 6), randint(1, 6)]
        return coordinates


class Player(PlayerMoves):

    def coordinates(self):
        while True:
            coordinates = Board.input_error(input(f'Введите координаты выстрела: ').split())
            if coordinates:
                return coordinates
            else:
                continue


class MainGame:
    def __init__(self):
        self.call_count = int(
            input("Для автоматического расположения кораблей нажмите '0' для ручного расположения 1: "))
        player_board = self.create_board()
        self.call_count = 0
        bot_board = self.create_board()
        bot_board.displayed_ships = True
        self.player = Bot(bot_board, player_board)
        self.bot = Player(player_board, bot_board)

    def create_board(self):
        user_filed = None

        while user_filed is None:
            user_filed = self.call()
        return user_filed

    def call(self):
        user_field = Board()
        user_field.begin()
        ships_placement = Ships()
        ships_name = ["трёхпалубного", "двухпалубного", "двухпалубного", "однопалубного", "однопалубного",
                      "однопалубного", "однопалубного", "однопалубного"]
        while True:
            if self.call_count: #если ввод ручной
                print("_" * 27)
                coordinates = Board.input_error(input(
                    f'Введите координаты для расположения вашего {ships_name[ships_placement.count_ships]} корабля: ').split())
                print("Доска пользователя:")
                print(self.player)
                if coordinates:
                    ships_placement.coordinates_setter(coordinates)
                else:
                    continue
            else:
                ships_placement.coordinates_setter([randint(1, 6), randint(1, 6)])
            if ships_placement and len(ships_placement.ship_coordinates_getter()) == 11:
                print("Breakpoint", ships_placement.ship_coordinates_getter())
                user_field.set_coordinates(ships_placement.ship_coordinates_getter())
                return user_field

    def game(self):
        num = randint(0, 1)
        while True:
            print("Доска пользователя:")
            print(self.player.player2)
            print("Доска компьютера:")
            print(self.bot.player2)
            if num:
                print("Ходит пользователь!")
                placement = self.bot.move()
                if placement:
                    num = 1
                else:
                    num = 0
            else:
                print("Ходит компьютер!")
                placement = self.player.move()
                if placement:
                    num = 0
                else:
                    num = 1
            if not placement:
                continue
            if self.bot.player2.count_shoots == 11:
                print("-" * 27)
                print("Пользователь выиграл с меткостью ", {
                    (self.bot.player2.count_shoots // self.bot.player2.COUNT) * 100},  "%")
                print("-" * 27)
                break

            if self.player.player2.count_shoots == 11:
                print("-" * 27)
                print(f"Компьютер выиграл с меткостью ", {
                    (self.player.player2.count_shoots // self.player.player2.COUNT) * 100}, "%")
                print("-" * 27)
                break

def new_game():
    while True:
        a = MainGame()
        a.game()
        if input("Для начала новой игры нажмите n: ") == "n":
            continue
        else:
            break


new_game()

